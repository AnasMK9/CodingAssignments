#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/shm.h>
#include <math.h>

/*
Compile with "gcc -o out.o SumWithFork.c -lm"
Let the user to enter 2 parameters that represent a number to calculate the sum of all numbers less than it, and
the number of processes to be created using fork. Then, divide the computation  among the processes equally
*/
int main(int argc, char *argv[])
{

    if (argc != 2)
    {
        printf("Usage: file.o <integer value>\n");
        return -1;
    }
    if (atoll(argv[1]) < 0)
    {
        printf("Usage: file.o < (integer value > 4) >");
        return -1;
    }
    pid_t pid;
    int i;
    pid_t child_pids[4];
    long long int v = atoll(argv[1]);           //value
    if(v < 0) printf("Overflow warning %lld", v);
    long long int bl = 0;                       //bottom limit in thread
    long long int j = (int)ceil((double)v / 4); //jump amount
    long long int ul = j;                       //upper limit in thread
    long long int sum =0;
    const int SIZE = sizeof(long long) * 4;
    int shm_fd = shmget(IPC_PRIVATE, SIZE, 0777 | IPC_CREAT);

    for (i = 0; i < 4; i++)
    {
        if (i == 0)
        {
            ul = ul;
            bl = bl;
        }
        else if ((ul + j) > v)
        {
            bl = ul + 1;
            ul = v;
        }
        else
        {
            bl = ul + 1;
            ul = ul + j;
        }
        switch (pid = child_pids[i] = fork())
        {
        case -1:
            printf("error in creating child %lld", i);
            exit(1);
            break;

        case 0:
            sum = 0;
            for (bl; bl <= ul; bl++)
                sum += bl;
            long long int *CM = (long long int *)shmat(shm_fd, 0, 0); //child memory
            CM[i] = sum;
            shmdt(CM);

            printf("sum in child %d is %lld\n", i, sum);

            exit(0);
            break;
        }
    }
    sum = 0;
    if (pid != 0 && pid != -1)
    {
        long long int *PM = (long long int *)shmat(shm_fd, 0, 0);

        for (i = 0; i < 4; i++)
        {
            waitpid(child_pids[i], NULL, 0);

            sum += PM[i];
        }
    }
    shmctl(shm_fd, IPC_RMID, 0);
    printf("Final sum is %lld\n", sum);
    return 0;
}
